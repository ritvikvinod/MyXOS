alias physicalSP S0;
alias systemCallNo S1;
alias filename S2;
alias fileDescriptor S3;
alias i S4;
alias fatEntry S5;
alias systemFileEntry S6;
alias j S7;
alias currentPID S8;
alias currentPCB S9;
alias processFileEntry S10;

physicalSP=([PTBR+2*(SP/512)]*512)+(SP%512);
systemCallNo=[physicalSP-1];
filename=[physicalSP-3];
fileDescriptor=[physicalSP-3];

if(systemCallNo==2) then
	i=0;
	while(i<64) do
		if([FAT+i*8]==filename) then
			fatEntry=i;
			break;
		endif;
		i=i+1;
	endwhile;
	if(i==64) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	i=0;
	while(i<64) do
		if([FILE_TABLE+i*2]==fatEntry) then
			systemFileEntry=i;
			break;
		endif;
		i=i+1;
	endwhile;
	if(i==64) then
		j=0;
		while(j<64) do
			if([FILE_TABLE+j*2]==-1) then
				systemFileEntry=j;
				break;
			endif;
			j=j+1;
		endwhile;
		if(j==64) then
			[physicalSP-2]=-1;
			ireturn;
		endif;
	endif;
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + 32 * currentPID;
	i=15;
	while(i<31) do
		if([currentPCB+i]==-1) then
			processFileEntry=(i-15)/2;
			[currentPCB+i]=systemFileEntry;
			[currentPCB+i+1]=0;
			break;
		endif;
		i=i+2;
	endwhile;
	if(i==31) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	[FILE_TABLE+systemFileEntry*2]=fatEntry;
	[FILE_TABLE+systemFileEntry*2+1]=[FILE_TABLE+systemFileEntry*2+1]+1;
	[physicalSP-2]=processFileEntry;
	ireturn;
endif;

if(systemCallNo==3) then
	if(fileDescriptor<0 || fileDescriptor>7) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + 32 * currentPID;
	if([currentPCB+15+(fileDescriptor*2)]==-1) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	systemFileEntry=[currentPCB+15+(fileDescriptor*2)];
	[FILE_TABLE+systemFileEntry+1]=[FILE_TABLE+systemFileEntry+1]-1;
	if([FILE_TABLE+systemFileEntry+1]==0) then
		[FILE_TABLE+systemFileEntry]=-1;
	endif;
	[currentPCB+15+(fileDescriptor*2)]=-1;
	[currentPCB+15+(fileDescriptor*2)+1]=-1;
	[physicalSP-2]=0;
	ireturn;
endif;
