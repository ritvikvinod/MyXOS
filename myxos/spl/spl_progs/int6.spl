alias physicalSP S0;
alias systemCallNo S1;
alias filename S2;
alias i S3;
alias basicB S4;
alias newCodeBlocks S5;
alias processPageTable S6;
alias oldCodeBlocks S7;
alias currentPID S8;
alias currentPCB S9;
alias extraPage S10;
alias newPage S11;
alias j S12;
alias k S13;
alias childPID S14;
alias systemFileEntry S15;

physicalSP=([PTBR+2*(SP/512)]*512)+(SP%512);
systemCallNo=[physicalSP-1];
filename=[physicalSP-3];

if(systemCallNo==9) then
	i=0;
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + 32 * currentPID;
	while(i<64) do
		if([FAT+i*8]==filename) then
			basicB=[FAT+(i*8)+2];
			break;
		endif;
		i=i+1;
	endwhile;
	if(i==64) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	load(1,basicB);
	i=0;
	newCodeBlocks=0;
	oldCodeBlocks=0;
	breakpoint;
	while(i<256) do
		if([SCRATCHPAD+i]>0) then
			newCodeBlocks=newCodeBlocks+1;
		endif;
		i=i+1;
	endwhile;
	breakpoint;
	i=0;
	while(i<3) do
		if([PAGE_TABLE+(currentPID*8)+(i*2)]!=-1) then
			oldCodeBlocks=oldCodeBlocks+1;
		endif;
		i=i+1;
	endwhile;
	breakpoint;
	if(oldCodeBlocks>newCodeBlocks) then
		
		i=0;
		while(i<oldCodeBlocks-newCodeBlocks) do
				extraPage=[PAGE_TABLE+(currentPID*8)+((2-i)*2)];
				[MEM_LIST+extraPage]=0;
				[PAGE_TABLE+(currentPID*8)+((2-i)*2)]=-1;
				[PAGE_TABLE+(currentPID*8)+((2-i)*2)+1]="00";
			i=i+1;
		endwhile;
	endif;
	j=newCodeBlocks;
	k=oldCodeBlocks;
	if(oldCodeBlocks<newCodeBlocks) then
		i=29;
		while(i<64) do
			if(j==k) then
				break;
			endif;
			if([MEM_LIST+i]==0) then
				[MEM_LIST+i]=1;
				[PAGE_TABLE+childPID*8+(k*2)]=i;
				[PAGE_TABLE+childPID*8+(k*2)+1]="01";
				k=k+1;
			endif;
			i=i+1;
		endwhile;
	endif;
	i=0;
	j=0;
	breakpoint;
	while(i<newCodeBlocks) do
		if([PAGE_TABLE+(currentPID*8)+(i*2)]!=-1) then
			if([SCRATCHPAD+j]>0) then
				load ([PAGE_TABLE+(currentPID*8)+(i*2)],[SCRATCHPAD+j]);
			endif;
		endif;
		j=j+1;
		i=i+1;
	endwhile;
	i=0;
	while(i<8) do
		if([currentPCB+15+(i*2)]!=-1) then
			systemFileEntry=[currentPCB+15+(i*2)];
			[FILE_TABLE+systemFileEntry+1]=[FILE_TABLE+systemFileEntry+1]-1;
			if([FILE_TABLE+systemFileEntry+1]==0) then
				[FILE_TABLE+systemFileEntry]=-1;
			endif;
			[currentPCB+15+(i*2)]=-1;
			[currentPCB+15+(i*2)+1]=-1;
		endif;
		i=i+1;
	endwhile;
	SP=3*512;
	physicalSP=([PTBR+2*(SP/512)]*512)+(SP%512);
	[physicalSP]=0;
	ireturn;	
endif;

if(systemCallNo==11) then
	currentPID = (PTBR - 1024) / 8;
	[physicalSP-2]=currentPID;
	ireturn;
endif;

if(systemCallNo==12) then
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + 32 * currentPID;
	[physicalSP-2]=[currentPCB+31];
	ireturn;
endif;
