alias physicalSP S0;
alias systemCallNo S1;
alias fileDescriptor S2;
alias newLseek S3;
alias currentPID S4;
alias currentPCB S5;
alias systemFileEntry S6;
alias fatEntry S7;
alias fileSize S8;
alias wordRead S9;
alias lseekPosition S10;
alias blockIndex S11;
alias blockNo S12;

physicalSP=([PTBR+2*(SP/512)]*512)+(SP%512);
systemCallNo=[physicalSP-1];
fileDescriptor=[physicalSP-4];
newLseek=[physicalSP-3];

if(systemCallNo==6) then
	if(fileDescriptor<0 || fileDescriptor>7) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + 32 * currentPID;
	if([currentPCB+15+fileDescriptor*2]==-1) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	systemFileEntry=[currentPCB+15+fileDescriptor*2];
	fatEntry=[FILE_TABLE+systemFileEntry*2];
	fileSize=[FAT+(fatEntry*8)+1];
	if(newLseek<0 || newLseek>fileSize) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	[currentPCB+15+(fileDescriptor*2)+1]=newLseek;
	[physicalSP-2]=0;
	ireturn;
endif;

wordRead=[physicalSP-3];

if(systemCallNo==7) then
	if(fileDescriptor<0 || fileDescriptor>7) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + 32 * currentPID;
	if([currentPCB+15+fileDescriptor*2]==-1) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	systemFileEntry=[currentPCB+15+fileDescriptor*2];
	fatEntry=[FILE_TABLE+systemFileEntry*2];
	lseekPosition=[currentPCB+15+(fileDescriptor*2)+1];
	load(1,[FAT+(fatEntry*8)+2]);
	fileSize=[FAT+(fatEntry*8)+1];
	if(lseekPosition==fileSize) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	blockIndex=lseekPosition/512;
	blockNo=[SCRATCHPAD+blockIndex];
	load(1,blockNo);
	lseekPosition=lseekPosition%512;
	[physicalSP-3]=[SCRATCHPAD+lseekPosition];
	[currentPCB+15+fileDescriptor*2+1]=[currentPCB+15+fileDescriptor*2+1]+1;
	[physicalSP-2]=0;
	ireturn;
endif;
