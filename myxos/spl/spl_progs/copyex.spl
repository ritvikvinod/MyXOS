alias Cause S0;
alias VPagenum S1;
alias Ip_addr S2;
alias physicalSP S3;
alias ip S4;
alias temp S5;
alias pid S6;
alias freePage S7;
alias i S8;
alias j S9;
alias pt S10;
alias freeSwap S11;
alias PPagenum S13;


pid = (PTBR - 1024)/8;
physicalSP = ([PTBR + 2*(SP/512)]*512) + (SP%512);
Cause = EFR % 10;		// Gets value of cause field (size 1 char)
VPagenum = (EFR / 10) % 100;    // Gets value of BadVAddr 
Ip_addr = (EFR/1000);		//Gets value of IP at the point of ex

if( Cause == 1 ) then
	print("Illeg. instr.");

endif;

if( Cause == 2 ) then
	print("Illeg. mem. acc.");
endif;

if( Cause == 3 ) then
	print("arith. exc.");
endif;


if( Cause == 4 ) then
	print("Illeg. operand");
endif;

if( Cause != 0 ) then
	ip = [physicalSP];
	[physicalSP+1] = 10;
	[physicalSP+2] = ip;
	SP = SP + 2; 
	inline "jmp 11776";	

else
	if( [PTBR + 2*VPagenum] == -1 ) then
		ip = [physicalSP];
		[physicalSP+1] = 10;
		[physicalSP+2] = ip;
		SP = SP + 2; 
		inline "jmp 11776";	
	endif;	
	
	freePage = -1;
	temp = 25;
	while(temp<64 && freePage ==-1) do
		if( [MEM_LIST + temp] == 0 ) then
			freePage = temp;
			[MEM_LIST + temp] = 1;
		endif;
		temp = temp + 1;	
	endwhile;
	

	if(freePage == -1 ) then ///Page not found. Second chance algo
		
		i = pid;
		while( freePage == -1) do
			pt = 1024 + i*8;		
			j = 0;
			while(j<3 && freePage == -1) do
				if([pt+2*j] == -1 || [pt+2*j+1]=="00" || [pt+2*j+1]=="10") then
					j=j+1;
					continue;
				endif;
				if( [MEM_LIST + [pt + 2*j]] >1 ) then
					j=j+1;
					continue;
				endif;
				if( [pt + 2*j + 1] == "11" ) then
					[pt + 2*j + 1] = "01";
				else if( [pt + 2*j + 1] == "01" ) then
					freeSwap = -1;
					temp = 448;
					while( temp<512 && freeSwap == -1 ) do
						if([DISK_LIST + temp] == 0) then
							freeSwap = temp;
							[DISK_LIST + temp] = 1;
							store(6,20);
							freePage = [pt + 2*j];
							store(freePage,freeSwap);
							[pt + 2*j] = freeSwap;
							[pt + 2*j + 1] = "00";
						endif;
						temp = temp + 1;
					endwhile;
					if( freeSwap == -1 ) then
						print("No swap space");
						ip = [physicalSP];
						[physicalSP+1] = 10;
						[physicalSP+2] = ip;
						SP = SP + 2; 
						inline "jmp 11776";
					endif;
				      endif;
				endif;
				j=j+1;
			endwhile;
			i= i +1;
			if(i>31) then i=0; endif;
		endwhile;	
	endif;	

	if(freePage == -1 ) then
		ip = [physicalSP];
		[physicalSP+1] = 10;
		[physicalSP+2] = ip;
		SP = SP + 2; 
		inline "jmp 11776";
	endif;

	PPagenum = [PTBR + 2*VPagenum];
	if ( PPagenum >20 && PPagenum <448 ) then
		load(freePage, PPagenum);
	else if(PPagenum >447 && PPagenum <512 ) then
		load(freePage, PPagenum);
		[DISK_LIST + PPagenum] = [DISK_LIST + PPagenum] - 1;
		store(6,20);
	     endif;
	endif;

	[PTBR + 2*VPagenum] = freePage;
	[PTBR + 2*VPagenum + 1] = "11";
	SP = SP + 1;
	[physicalSP+1] =  Ip_addr;
	ireturn;
endif;

