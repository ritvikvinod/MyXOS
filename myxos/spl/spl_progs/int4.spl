alias physicalSP S0;
alias systemCallNo S1;
alias fileDescriptor S2;
alias wordToWrite S3;
alias systemFileEntry S4;
alias lseekPosition S5;
alias fatEntry S6;
alias basicB S7;
alias blockIndex S8;
alias blockNo S9;
alias i S10;
alias currentPID S11;
alias currentPCB S12;

physicalSP=([PTBR+2*(SP/512)]*512)+(SP%512);
systemCallNo=[physicalSP-1];
fileDescriptor=[physicalSP-4];
wordToWrite=[physicalSP-3];

if(systemCallNo==5) then
	if(fileDescriptor<0 || fileDescriptor>7) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + 32 * currentPID;
	if([currentPCB+15+(fileDescriptor*2)]==-1) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	systemFileEntry=[currentPCB+15+(fileDescriptor*2)];
	lseekPosition=[currentPCB+15+(fileDescriptor*2)+1];
	fatEntry=[FILE_TABLE+(systemFileEntry*2)];
	basicB=[FAT+(fatEntry*8)+2];
	load(1,basicB);
	blockIndex=lseekPosition/512;
	blockNo=[SCRATCHPAD+blockIndex];
	if([SCRATCHPAD+blockIndex]==-1) then
		i=20;
		while(i<448) do
			if([DISK_LIST+i]==0) then
				if([FAT+(fatEntry*8)+1]>(256*512)) then
					[physicalSP-2]=-1;
					ireturn;
				endif;
				[DISK_LIST+i]=1;
				blockNo=i;
				[SCRATCHPAD+blockIndex]=i;
				store(1,basicB);
				[FAT+(fatEntry*8)+1]=[FAT+(fatEntry*8)+1]+512;					
				store(5,19);
				store(6,20);
				break;
			endif;
			i=i+1;
		endwhile;
		if(i==448) then
			[physicalSP-2]=-1;
			ireturn;
		endif;
	endif;
	load(1,blockNo);
	lseekPosition=lseekPosition%512;
	[SCRATCHPAD+lseekPosition]=wordToWrite;
	store(1,blockNo);
	[currentPCB+15+(fileDescriptor*2)+1]=[currentPCB+15+(fileDescriptor*2)+1]+1;
	[physicalSP-2]=0;
	ireturn;
endif;
