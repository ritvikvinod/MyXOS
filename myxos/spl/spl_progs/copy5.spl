alias sysCallNo S0;
alias physicalSP S1;
alias pid S2;
alias currentPCB S3;
alias freePCB S4;
alias temp S5;
alias i S6;
alias childPTBR S7;
alias temp2 S8;
alias counter S9;
alias cid S10;
alias pt S11;
alias j S12;
alias freeSwap S13;
alias ip S14;
alias freePage S15;


physicalSP = ([PTBR + 2*(SP/512)]*512) + (SP%512);
sysCallNo = [physicalSP - 1];
pid = (PTBR - 1024)/8;
currentPCB = READY_LIST + pid*32;

if( sysCallNo != 8 ) then
	[physicalSP - 2] = -1;
	ireturn;
endif;

cid = -1;
counter = 0;
while( (counter < 32)  && (cid == -1) ) do
	if( [READY_LIST + counter*32 + 1] == 0 ) then
		cid = counter;
	endif; 
	counter = counter + 1;
endwhile;


if( cid == -1 ) then
	[physicalSP - 2] = -1;
	ireturn;
endif;



freePCB = READY_LIST + cid*32;
[freePCB] = cid;


// checking if a page available
counter = 25;
temp = -1;
while ( (counter < 64) && (temp == -1) ) do
	if( [MEM_LIST + counter] == 0 ) then
		temp = counter;
		[MEM_LIST + counter] = 1;
	endif;
	counter = counter + 1;
endwhile;

freePage = temp;

if( freePage == -1 ) then
	i = pid;
	while( freePage == -1) do
		pt = 1024 + i*8;		
		j = 0;
		while(j<3 && freePage == -1) do
			if([pt+2*j] == -1 || [pt+2*j+1]=="00" || [pt+2*j+1]=="10") then
				j=j+1;
				continue;
			endif;
			if( [MEM_LIST + [pt + 2*j]] >1 ) then
				j=j+1;
				continue;
			endif;
			if( [pt + 2*j + 1] == "11" ) then
				[pt + 2*j + 1] = "01";
			else if( [pt + 2*j + 1] == "01" ) then
				freeSwap = -1;
				temp = 448;
				while( temp<512 && freeSwap == -1 ) do
					if([DISK_LIST + temp] == 0) then
						freeSwap = temp;
						[DISK_LIST + temp] = 1;
						store(6,20);
						freePage = [pt + 2*j];
						store(freePage,freeSwap);
						[pt + 2*j] = freeSwap;
						[pt + 2*j + 1] = "00";
					endif;
					temp = temp + 1;
				endwhile;
				if( freeSwap == -1 ) then
					[physicalSP - 2] = -1;
					ireturn;
				endif;
			      endif;
			endif;
			j=j+1;
		endwhile;
		i= i +1;
		if(i>31) then i=0; endif;
	endwhile;
endif;

if(freePage==-1) then
[physicalSP - 2] = -1;
	ireturn;
endif;

//copying parent's stack to child
counter = 0;
temp2 = [PTBR + 6];
while( counter <512 ) do
	[freePage*512 + counter] = [temp2*512 + counter];
	counter = counter + 1;
endwhile;


childPTBR = 1024 + cid*8;
[childPTBR + 6] = freePage;
[childPTBR + 7] = "01";


counter = 0;
while( counter < 3 ) do
	[childPTBR + counter*2] = [PTBR + counter*2];
	[childPTBR + counter*2 + 1] = [PTBR + counter*2 + 1];
	if( [PTBR + counter*2] != -1 ) then
		if( [PTBR + counter*2 + 1] == "11" || [PTBR + counter*2 + 1] == "01" )then
			[MEM_LIST + [PTBR + counter*2]] = [MEM_LIST + [PTBR + counter*2]] + 1;
		else
			if( [PTBR + counter*2] >= 448 ) then
				[DISK_LIST + [PTBR + counter*2]] = [3072 + [PTBR + counter*2]] + 1;
			endif;
		endif;
	endif;
	counter = counter + 1;
endwhile;
store(6,20);

[freePCB + 5] = childPTBR;  //setting PTBR
[freePCB + 4] = [physicalSP];	//setting IP
[freePCB + 3] = SP - 1;
[freePCB + 2] = BP; 
[freePCB + 6] = PTLR;
[freePCB + 7] = R0;
[freePCB + 8] = R1;
[freePCB + 9] = R2;
[freePCB + 10] = R3;
[freePCB + 11] = R4;
[freePCB + 12] = R5;
[freePCB + 13] = R6;
[freePCB + 14] = R7;
[freePCB + 31] = pid;

counter = 0;
while( counter < 8 ) do
 	[freePCB + 15 + counter*2] = [currentPCB + 15 + counter*2];
 	[freePCB + 15 + counter*2 + 1] = [currentPCB + 15 + counter*2 + 1];
	if ( [freePCB + 15 + counter*2] != -1 ) then
		[FILE_TABLE + [freePCB + 15 + counter*2]*2 + 1] = [FILE_TABLE + [freePCB + 15 + counter*2]*2 + 1] + 1;
	endif;
	counter = counter + 1;
endwhile;
[freePCB + 1] = 1;

//SP = SP - 1;
[physicalSP - 2] = cid;
physicalSP = ([childPTBR + 2*((SP-1)/512)]*512) + ((SP-1)%512);
[physicalSP - 1] = -2;

ireturn;

	



